#!/usr/bin/env ruby

def log(message)
  puts "[ bin/setup ] #{message}"
end

def system!(*args)
  log "Executing #{args}"
  if system(*args)

    log "#{args} succeeded"
  else
    log "#{args} failed"

    abort
  end
end

def setup
  log 'Installing gems'
  # Only do bundle install if the much-faster
  # bundle check indicates we need to
  system! 'bundle check || bundle install'
  log 'Dropping & recreating the development database'
  # Note that the very first time this runs, db:reset
  # will fail, but this failure is fixed by
  # doing a db:migrate
  system! 'bin/rails db:reset || bin/rails db:migrate'
  log 'Dropping & recreating the test database'
  # Setting the RAILS_ENV explicitly to be sure
  # we actually reset the test database
  system!({ 'RAILS_ENV' => 'test' }, 'bin/rails db:reset')
  log 'All set up.'
  log ''
  log 'To see commonly-needed commands, run:'
  log ''
  log 'bin/setup help'
  log ''
end

def help
  log 'Useful commands:'
  log ''
  log ' bin/run'
  log ''
  log 'LOGRAGE_IN_DEVELOPMENT=true bin/run'
  log '# run app locally using'
  log '# production-like logging'
  # run app locally"
  log ''
  log ' bin/ci'
  log ''
  # runs all tests and checks as CI would"
  log ''
  log ' bin/rails test'
  log ''
  # run non-system tests"
  log ''
  log ' bin/rails test:system'
  log ''
  # run system tests"
  log ''
  log ' bin/setup help'
  log ''
  # show this help"
  log ''
end

if ARGV[0] == 'help'
  help
else
  setup
end
